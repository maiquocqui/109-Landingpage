extends _layout/layout
block variables
  - var title = 'K-Flex'
  - var bodyclass = 'index'
  //- Begin page
block body 
  .wrapper
    .row 
      h1 Welcome to K-FLEX Core
      p This is a framework CSS for Flex, easy to intial flex-box using class and attr. Author: Bao Nguyen at 
        a.class(href="http://baonguyenyam.github.io/", target="_blank") baonguyenyam.github.io
      h2(style="margin-top:2rem") Flex Container
      h3 Initial Flex
      hr 
      p This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.
    .left
      p 
        strong .flex or [flex]
      .container.flex
        .demo 1
        .demo 2
        .demo 3
      .tx 
        | Container default is
        code display: flex
        | 
        | Item default is null or 
        code flex: 0 1 auto
      .tx 
        | Call flex box with class 
        code .flex
        | 
        | OR attr
        code flex
      p 
        b HTML:
        pre.
          &lt;div class="flex"&gt;&lt;/div&gt; or &lt;div flex&gt;&lt;/div&gt; or &lt;flex&gt;&lt;/flex&gt;
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            display: flex /* or inline-flex */
          }
      
    .right
      img.class(src="img/flex-container.svg", alt="alt")
      img.class(src="img/flex-items.svg", alt="alt")
      
  .wrapper
    .row 
      hr 
      h3 Flex direction
      p This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex-direction: row | row-reverse | column | column-reverse; 
          }
    .left
      p 
        strong .flex-row
      .container.flex.flex-row
        .demo.wp 1
        .demo.wp-2 2
        .demo.wp-1 3
      p 
        strong .flex-row-rev
      .container.flex.flex-row-rev
        .demo.wp 1
        .demo.wp-1 2
        .demo.wp-3 3
      p 
        strong .flex-col
      .container.flex.flex-col
        .demo 1
        .demo 2
        .demo 3
      p 
        strong .flex-col-rev
      .container.flex.flex-col-rev
        .demo 1
        .demo 2
        .demo 3
    .right 
      .text-right 
        img.class(src="img/flex-direction1.svg", alt="alt")

  .wrapper
    .row 
      hr 
      h3 Flex inline
    .left 
      p 
        strong .flex-inline.flex-row-rev
      .container.flex.flex-inline.flex-row-rev
        .demo.wp 1
        .demo.wp-2 2
        .demo.wp-4 3
      
      p 
        strong .flex-inline.flex-col-rev
      .container.flex.flex-inline.flex-col-rev
        .demo.wp 1
        .demo.wp 2
        .demo 3
    .right 

  .wrapper
    .row 
      hr
      h3 Flex Wrap
      p By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. Direction also plays a role here, determining the direction new lines are stacked in.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex-wrap: nowrap | wrap | wrap-reverse;
          }
    .left
      p 
        strong .flex-nowrap
      .container.flex.flex-nowrap
        .demo.wp 1
        .demo.wp 2
        .demo.wp 3
        .demo.wp 4
        .demo.wp 5
      p 
        strong .flex-wrap
      .container.flex.flex-wrap
        .demo.wp-3 1
        .demo.wp 2
        .demo.wp-4 3
        .demo.wp 4
        .demo.wp 5
      p 
        strong .flex-wrap-rev
      .container.flex.flex-wrap-rev
        .demo.wp 1
        .demo.wp-3 2
        .demo.wp 3
        .demo.wp 4
        .demo.wp 5
    .right 
      .text-right 
        img.class(src="img/flex-wrap.svg", alt="alt")

  .wrapper
    .row 
      hr
      h3 Flex Justify Content
      p This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            justify-content: flex-start | flex-end | center | space-between | space-around;
          }
    .left
      p 
        strong .flex-content-center
      .container.flex.flex-content-center
        .demo.wp-2 1
        .demo.wp-4 2
        .demo.wp 3
      p 
        strong .flex-content-between
      .container.flex.flex-content-between
        .demo.wp-2 1
        .demo.wp-3 2
        .demo.wp 3
      p 
        strong .flex-content-around
      .container.flex.flex-content-around
        .demo.wp-1 1
        .demo.wp-2 2
        .demo.wp 3
      p 
        strong .flex-content-end
      .container.flex.flex-content-end
        .demo.wp 1
        .demo.wp-2 2
        .demo.wp 3
    .right 
      .text-right 
        img.class(src="img/justify-content.svg", alt="alt")

  .wrapper
    .row 
      hr
      h3 Flex Align Items
      p This defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            align-items: flex-start | flex-end | center | baseline | stretch;
          }
    .left
      p 
        strong Flex align-items-center
      .container.flex.align-items-center
        .demo.wp-2.hp 1
        .demo.wp-4.hp-2 2
        .demo.wp-3.hp-3 3
      p 
        strong Flex align-items-end
      .container.flex.align-items-end
        .demo.wp-2.hp 1
        .demo.wp-4.hp-2 2
        .demo.wp-3.hp-3 3
      p 
        strong Flex align-items-baseline
      .container.flex.align-items-baseline
        .demo.wp-2.hp 1
        .demo.wp-4.hp-2 2
        .demo.wp-3.hp-3 3
      p 
        strong Flex align-items-stretch
      .container.flex.align-items-stretch
        .demo.wp-2.hp 1
        .demo.wp-4.hp-2 2
        .demo.wp-3.hp-3 3
      
      ul
        li
          code flex-start
          | : cross-start margin edge of the items is placed on the cross-start line
        li
          code flex-end
          | : cross-end margin edge of the items is placed on the cross-end line
        li
          code center
          | : items are centered in the cross-axis
        li
          code baseline
          | : items are aligned such as their baselines align
        li
          code stretch
          |  (default): stretch to fill the container (still respect min-width/max-width)
    .right 
      .text-right 
        img.class(src="img/align-items.svg", alt="alt")




  .wrapper
    .row 
      hr
      h3 Flex Align Content
      p This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.
      p 
        code Note: this property has no effect when there is only one line of flex items.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            align-content: flex-start | flex-end | center | space-between | space-around | stretch;
          }
    .left
      p 
        strong .align-content-around
      .container.hk.flex.flex-row.flex-wrap.align-content-around
        .demo.wp-5.hp-4 1
        .demo.wp-5.hp-4 2
        .demo.wp-5.hp-4 3
        .demo.wp-5.hp-4 4
      p 
        strong .align-content-start
      .container.hk.flex.flex-row.flex-wrap.align-content-start
        .demo.wp-5.hp-4 1
        .demo.wp-5.hp-4 2
        .demo.wp-5.hp-4 3
        .demo.wp-5.hp-4 4
      p 
        strong .align-content-between
      .container.hk.flex.flex-row.flex-wrap.align-content-between
        .demo.wp-5.hp-4 1
        .demo.wp-5.hp-4 2
        .demo.wp-5.hp-4 3
        .demo.wp-5.hp-4 4
      p 
        strong .align-content-stretch
      .container.hk.flex.flex-row.flex-wrap.align-content-stretch
        .demo.wp-5.hp-4 1
        .demo.wp-5.hp-4 2
        .demo.wp-5.hp-4 3
        .demo.wp-5.hp-4 4
      p 
        strong .align-content-center
      .container.hk.flex.flex-row.flex-wrap.align-content-center
        .demo.wp-5.hp-4 1
        .demo.wp-5.hp-4 2
        .demo.wp-5.hp-4 3
        .demo.wp-5.hp-4 4
     
    .right 
      .text-right 
        img.class(src="img/align-content.svg", alt="alt")

  hr 
  .wrapper
    .row 
      h2(style="margin-top:2rem") Flex Items
      hr
      h3 Flex Order
      p By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. 
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            order: &lt;integer&gt;; /* -1, 0, 1, ...*/
          }
    .left
      p 
        strong Normal
      .container.flex.flex-row.flex-wrap
        .demo.wp .flex-order-4
        .demo.wp .flex-order-1
        .demo.wp .flex-order-2
        .demo.wp .flex-order-3
      p 
        strong .flex-order-*
      .container.flex.flex-row.flex-wrap
        .demo.wp.flex-order-4 .flex-order-4
        .demo.wp.flex-order-1 .flex-order-1
        .demo.wp.flex-order-2 .flex-order-2
        .demo.wp.flex-order-3 .flex-order-3
    .right 
      .text-right 
        img.class(src="img/order.jpg", alt="alt")


  .wrapper
    .row 
      hr
      h3 Flex grow
      p This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
      p If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex-grow: &lt;number&gt;; /* default: 0 */
          }
    .left
      p 
        strong .flex-grow-0
      .container.flex.flex-row.flex-wrap
        .demo.flex-grow-0 1
        .demo.flex-grow-0 2
        .demo.flex-grow-0 3
        .demo.flex-grow-0 4
      p 
        strong .flex-grow-1
      .container.flex.flex-row.flex-wrap
        .demo.flex-grow-1 1
        .demo.flex-grow-1 2
        .demo.flex-grow-1 3
        .demo.flex-grow-1 4
      p 
        strong .flex-grow-*
      .container.flex.flex-row.flex-wrap
        .demo.flex-grow-1 .flex-grow-1
        .demo.flex-grow-1 .flex-grow-1
        .demo.flex-grow-3 .flex-grow-3
    .right 
      .text-right 
        img.class(src="img/flex-grow.jpg", alt="alt")
        img.class(src="img/flex-grow2.jpg", alt="alt")

  .wrapper
    .row 
      hr
      h3 Flex shrink
      p This defines the ability for a flex item to shrink if necessary.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex-shrink: &lt;number&gt;; /* default: 1 */
          }
    .left
      p 
        strong .flex-shrink-1
      .container.flex.flex-row.flex-wrap
        .demo.flex-shrink-1 item
        .demo.flex-shrink-1 item
        .demo.flex-shrink-1 item
        .demo.flex-shrink-1 item
      p 
        strong .flex-shrink-*
      .container.flex.flex-row.flex-wrap
        .demo.flex-grow-1 item
        .demo.flex-shrink-0.flex-grow-1 .flex-shrink-0
        .demo.flex-grow-1 item
        .demo.flex-grow-1 item
      
    .right 
      .text-right 
        img.class(src="img/flex-shrink.jpg", alt="alt")

  .wrapper
    .row 
      hr
      h3 Flex basis
      p This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means "look at my width or height property" (which was temporarily done by the main-size keyword until deprecated). The content keyword means "size it based on the item's content" - this keyword isn't well supported yet, so it's hard to test and harder to know what its brethren max-content, min-content, and fit-content do.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex-basis: &lt;length&gt;; /* default: auto */
          }
    .left
      p 
        strong .flex-basis-* => *rem
      .container.flex.flex-row.flex-wrap
        .demo.flex-basis-3 3rem
        .demo.flex-basis-3 3rem
        .demo.flex-basis-3 3rem
        .demo.flex-basis-3 3rem
      p 
        strong .flex-basis-*p => *%
      .container.flex.flex-row.flex-wrap
        .demo.flex-basis-30p 30%
        .demo.flex-basis-20p 20%
        .demo.flex-basis-10p 10%
        .demo.flex-basis-10p 10%
    .right 
      .text-right 
        img.class(src="img/flex-basis.jpg", alt="alt")




  .wrapper
    .row 
      hr
      h3 Flex
      p This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            flex: none | auto | [ &lt;flex-grow&gt; &lt;flex-shrink&gt;? || &lt;flex-basis&gt; ];
          }


  .wrapper
    .row 
      hr
      h3 Flex Align self
      p This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items. Please see the align-items explanation to understand the available values.
      p 
        b CSS:
        pre.prettyprint.
          .class { 
            align-self: auto | flex-start | flex-end | center | baseline | stretch;
          }
    .left
      p 
        strong .align-self-end
      .container.flex.flex-row.flex-wrap
        .demo.align-self-end 3rem
        .demo item
        .demo item
        .demo item
      p 
        strong .align-self-stretch
      .container.flex.flex-row.flex-wrap
        .demo.align-self-center item
        .demo item
        .demo item
        .demo item
     
    .right 
      .text-right 
        img.class(src="img/align-self.jpg", alt="alt")


  script(src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js?skin=desert&lang=css&lang=ml")
  